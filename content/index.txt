---
title:      Writing Adapters for DataMapper
created_at: 2008-05-18 22:10:21.995012 -06:00
author:     Paul Sadauskas
company:    Absolute Performance, Inc
copyright:  Creative Commons
filter:
  - erb
  - maruku
  - slides
layout: presentation
---

Writing DataMapper Adapters
==================

[Paul Sadauskas][email] a.k.a [@Rando][twitter]

[Absolute Performance, Inc][api]

[email]:   psadauskas@gmail.com
[twitter]: http://twitter.com/TheAmazingRando
[api]:     http://absolute-performance.com

Who the Hell are You?
==================

I'm Paul Sadauskas. Find me on the intarwebs:

 * xmpp: [psadauskas@gmail.com][email]
 * www:  [TheAmazingRando.com/blog][blog]
 * git:  [github.com/paul][github]

DataMapper Hacker:

 * Designed `AbstractAdapter` API
 * Wrote initial implementation of the reference adapter, `InMemoryAdapter`

[blog]: http://theamazingrando.com/blog
[github]: http://github.com/paul

WTF is DataMapper?
==================

A lightweight, modular Ruby ORM.

 * Lazy Loading
 * (Strategic) Eager Loading
 * Plugin Architecture
 * Non-Relational Database Adapters

> * ORM is actually a degenerate subset of what DM is.
> * DM spends a lot of time bikeshedding. Anytime we can't agree, there's a plugin api.
{:handout}

Lazy-Loading
============

The query doesn't hit the adapter until it has to.

    r = Article.all
    r = r.all(:author => "Paul")
    r = r.all(:published_at.gt => 2.weeks.ago)
    r.map { |a| a.title }
    # results in this query:
    # Article.all( :author => "Paul",
    #              :published_at.gt => 2.weeks.ago )

Strategic-Eager Loading
=======================

When getting associated models from an object in a collection, get the associated models for all objects in that collection.

    articles.each { |a| a.comments }`
    # => results in this query:
    # Comment.all( :article => articles )

Plugins
=======

 * types - yaml, json, xml, regexp, uuid, csv, ip\_address, uri
 * migrations
 * validations - flexible, extensible
 * timestamps - created\_at, etc
 * sweatshop - fixtures
 * is-list, is-nested\_set, is-tree, is-state\_machine
 * is-searchable
 * is-versioned
 * ar-finders

Adapters
===================

Powerful adapter plugins mean its not just for RDBMSs:

 * InMemory
 * **Yaml files**
 * ReSTful web services
 * CouchDB
 * Sphinx
 * High-speed key-value stores (TokyoCabinet)
 * Salesforce, LDAP, Netflix, Google Video, ...

What Makes Up an Adapter?
==================

The primary goal of if the adapter API is to make adapters as easy as possible to write. You only need to write a few simple methods:

 * `initialize(name, uri_or_options)`
 * `create(resources)`
 * `read(query)`
 * `update(attributes, query)`
 * `delete(query)`

_Only applicable to datamapper/next_

Initialize
==================

    def initialize(name, options)
      super   # AbstractAdapter does some extra
              # initialization for you

      # Set up the dir to store the yaml files
      @path = FileUtils.mkdir_p(@options[:path])
    end

Create (API)
==================

Used by DataMapper to put records into a data-store: "INSERT" in SQL-speak.
It takes an array of the resources (model instances) to be saved. Resources
each have a key that can be used to quickly look them up later without
searching, if the adapter supports it.

param `[Enumerable(Resource)] resources`
:  The set of resources (model instances)

return `[Enumerable(Resource)]`
:  The resources that got saved. 

**Wall of Text Crits you for 100HP!**

Create (Demo)
===================

    Article.create(:title => "Test", :text => "Lorem Ipsum")

    # calls Adapter#create(resources)
    resources # =>
      [<Article @id=nil @title="Test" @text="Lorem Ipsum">]
    
    returns # =>
      [<Article @id=1 @title="Test" @text="Lorem Ipsum">]


Create (YAML Adapter)
===================

    def create(resources)
      resources.each do |resource|                    # 1
        next_serial(resource)                         # 2
        update_records(resource.model) do |records|   # 3
          records[resource.key] = resource.attributes # 4
        end
      end
    end

1. resources is a collection of DM::Resource objects
1. `#next_serial` is a mediocre method that tries to determine the next available id. 
3. `#update_records` is a helper in yaml adapter that reads all records from 
   the file for a model, yields them to the block, then writes the result back 
   to the file.
4. Add the attributes (a Hash) for this resource to the records hash.
{:handout}

Read (API)
==================

Looks up a set of records from the data-store that match the query.

param `[Query] query`
:  The query to be used to seach for the resources

return `[Enumerable(Hash), Enumerable(Resource)]`
:  The easiest way it just just return an array of hashes with keys being the 
  property field names, and the values. eg, `{ "id" => 1, "title" => "Article"}`.
  If your adapter can build the Resource objects itself, to save time or memory,
  it can return those instead.

Read (Demo)
==================

    a = Article.all

    # calls Adapter.read(query)
    query # =>
    <DataMapper::Query 
      @model=Article 
      @fields=[<DataMapper::Property @model=Article @name=:id>, 
               <DataMapper::Property @model=Article @name=:title>] 
      @conditions=[] @links=[] @order=[] @limit=nil @offset=0>

    returns # =>
    [{:title=>"Test", :text=>"Lorem Ipsum", :id=>1}]

Read (YAML Adapter)
==================

    def read(query)
      records = records_for(query.model)     # 1
      filter_records(records.values, query)  # 2
    end

1. `#records_for` reads all the records from the yaml file for this model.
   The records in this case is a Hash of `{ key => attrs }` pairs, with `key`
   being the array of keys for a record, and attrs being a hash of 
   `{property_name => value}` pairs of attributes.
2. `#filter_records` is where all the magic happens. If your data source
   doesn't have any native searching or sorting capabilities, just run your 
   records as an array of attribute hashes though this, and it will destructively
   remove all the records that don't match the query. It will also sort and limit, 
   as needed.
{:handout}

Update (API)
==================

Used by DataMapper to update the attributes on existing records in a
data-store.

param `[Hash] attributes`
: The set of attributes to update with, In the form of `{DataMapper::Property => value}` 

param `[Query] query`
: The query that should be used to find the resource(s) to update.

return `[boolean, Enumerable(Hash), Enumerable(Resource)]`
: True if all records matching the query were updated, False if any failed.  Also supports returning the same Hash Array and Resource Array as `#read`.

Update (Demo)
==================

    a.title = "New Title"
    a.save

    # calls Adapter#update(attributes, query)
    attributes # =>
    { <DataMapper::Property @model=Article @name=:title> =>
      "Test Update" }

    query # => 
    <DataMapper::Query 
    @model=Article 
    @conditions=<DataMapper::Conditions::AndOperation ... >
    >

    returns # => 
    [{:title=>"Test Update", :text=>"Lorem Ipsum", :id=>1}]

Update (YAML Adapter)
==================

      def update(attributes, query)
        update_records(query.model) do |records|
          updated = filter_records(records.values, query)
          updated.each { |r| r.update(attributes) }      # 1
        end
        updated                                          # 2
      end

1. Update the the records that match the query with the new attributes.
2. Return the updated records
{:handout}

Delete (API)
==================

Destroys all the records matching the given query.

param `[Query] query`
: The query used to locate the resources to be deleted.

return `[boolean, Enumerable(Hash), Enumerable(Resource)]`
: True if all records matching the query were deleted, False if any failed.  Also supports the same Hash Array and Resource Array as `#read`.

Delete (Demo)
==================

    a.destroy
    calls Adapter#delete(query)

    query # => 
    <DataMapper::Query 
    @model=Article 
    @conditions=<DataMapper::Conditions::AndOperation ... >
    >

    returns # => 
    [{:title=>"Test Update", :text=>"Lorem Ipsum", :id=>1}]

Delete (YAML Adapter)
==================

      def delete(query)
        update_records(query.model) do |records|
          deleted = filter_records(records.values, query).to_set
          records.delete_if { |_k,r| deleted.include?(r) } # 1
        end
        deleted                                            # 2
      end

1. Delete the records that match the query.
2. Return the records that were deleted.
{:handout}

How do I Know My Adapter Works?
===============================

    describe 'DataMapper::Adapters::YamlAdapter' do
      before :all do
        @model = Heffalump
        @string_property  = @model.color
        @integer_property = @model.num_spots
      end

      it_should_behave_like 'An Adapter'
    end

Query
==================

 * Query
   * Fields
   * Conditions
   * Order
   * Limit & Offset

Query - Fields 
==================
    
    @fields=[
      <DataMapper::Property @model=Heffalump @name=:id>, 
      <DataMapper::Property @model=Heffalump @name=:color>, 
      <DataMapper::Property @model=Heffalump @name=:num_spots>, 
      <DataMapper::Property @model=Heffalump @name=:striped>
    ]

Query - Conditions
==================

    @conditions=
      <DataMapper::Conditions::AndOperation
        @operands=[
          <DataMapper::Conditions::EqualToComparison
            @property=<DataMapper::Property 
                       @model=Heffalump 
                       @name=:id>, 
            @value=4
          >
        ]
      >

Query - Order
==================

    @order=[
      <DataMapper::Query::Direction:0xb792e804 
        @direction=:asc, 
        @property=<DataMapper::Property 
                    @model=Heffalump 
                    @name=:id>
      >
    ]

Query - Limit & Offset
==================

    @limit=20 
    @offset=40

The End
==================

 ~ fin ~



{:handout: class=handout}
{:nohighlight: class=no-highlight}
